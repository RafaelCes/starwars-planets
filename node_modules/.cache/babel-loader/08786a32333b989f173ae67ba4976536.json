{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documents/projects/sd-011-project-starwars-planets-search/src/PlanetsProvider.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\nimport response from './testData';\nconst url = 'https://swapi-trybe.herokuapp.com/api/planets/';\n\nfunction Provider({\n  children\n}) {\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState(data);\n  const [filters, setFilters] = useState({\n    filterByName: {\n      name: ''\n    },\n    filterByNumericValues: {\n      column: 'population',\n      comparison: 'maior que',\n      value: 0\n    }\n  });\n\n  const fetchData = () => fetch(url).then(result => result.json()).then(({\n    results\n  }) => setData(response.results.map(element => {\n    delete element.residents;\n    return element;\n  }))).catch(err => err);\n\n  const setFilterByName = name => {\n    setFilters({\n      filterByName: {\n        name\n      }\n    });\n  };\n\n  const filterByName = () => {\n    setFilteredData(data.filter(({\n      name\n    }) => name.includes(filters.filterByName.name)));\n  };\n\n  const contextValue = {\n    data,\n    fetchData,\n    filters,\n    setFilterByName,\n    filteredData,\n    setFilteredData,\n    filterByName\n  };\n  return /*#__PURE__*/React.createElement(PlanetsContext.Provider, {\n    value: contextValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nProvider.propTypes = {\n  children: PropTypes.node\n}.isRequired;\nexport default Provider;","map":{"version":3,"sources":["/home/rafael/Documents/projects/sd-011-project-starwars-planets-search/src/PlanetsProvider.js"],"names":["React","useState","PropTypes","PlanetsContext","response","url","Provider","children","data","setData","filteredData","setFilteredData","filters","setFilters","filterByName","name","filterByNumericValues","column","comparison","value","fetchData","fetch","then","result","json","results","map","element","residents","catch","err","setFilterByName","filter","includes","contextValue","propTypes","node","isRequired"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AACA,OAAOC,QAAP,MAAqB,YAArB;AAEA,MAAMC,GAAG,GAAG,gDAAZ;;AAEA,SAASC,QAAT,CAAkB;AAAEC,EAAAA;AAAF,CAAlB,EAAgC;AAC9B,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBR,QAAQ,CAAC,EAAD,CAAhC;AACA,QAAM,CAACS,YAAD,EAAeC,eAAf,IAAkCV,QAAQ,CAACO,IAAD,CAAhD;AACA,QAAM,CAACI,OAAD,EAAUC,UAAV,IAAwBZ,QAAQ,CAAC;AACrCa,IAAAA,YAAY,EAAE;AAAEC,MAAAA,IAAI,EAAE;AAAR,KADuB;AAEpCC,IAAAA,qBAAqB,EAAE;AAAEC,MAAAA,MAAM,EAAE,YAAV;AAAwBC,MAAAA,UAAU,EAAE,WAApC;AAAkDC,MAAAA,KAAK,EAAE;AAAzD;AAFa,GAAD,CAAtC;;AAKA,QAAMC,SAAS,GAAG,MAAMC,KAAK,CAAChB,GAAD,CAAL,CACrBiB,IADqB,CACfC,MAAD,IAAYA,MAAM,CAACC,IAAP,EADI,EAErBF,IAFqB,CAEhB,CAAC;AAAEG,IAAAA;AAAF,GAAD,KAAiBhB,OAAO,CAACL,QAAQ,CAACqB,OAAT,CAAiBC,GAAjB,CAAsBC,OAAD,IAAa;AAC/D,WAAOA,OAAO,CAACC,SAAf;AACA,WAAOD,OAAP;AACD,GAH8B,CAAD,CAFR,EAMrBE,KANqB,CAMdC,GAAD,IAASA,GANM,CAAxB;;AAQA,QAAMC,eAAe,GAAIhB,IAAD,IAAU;AAChCF,IAAAA,UAAU,CAAC;AAAEC,MAAAA,YAAY,EAAE;AAAEC,QAAAA;AAAF;AAAhB,KAAD,CAAV;AACD,GAFD;;AAIA,QAAMD,YAAY,GAAG,MAAM;AACzBH,IAAAA,eAAe,CAACH,IAAI,CAACwB,MAAL,CAAY,CAAC;AAAEjB,MAAAA;AAAF,KAAD,KAAcA,IAAI,CAACkB,QAAL,CAAcrB,OAAO,CAACE,YAAR,CAAqBC,IAAnC,CAA1B,CAAD,CAAf;AACD,GAFD;;AAIA,QAAMmB,YAAY,GAAG;AACnB1B,IAAAA,IADmB;AAEnBY,IAAAA,SAFmB;AAGnBR,IAAAA,OAHmB;AAInBmB,IAAAA,eAJmB;AAKnBrB,IAAAA,YALmB;AAMnBC,IAAAA,eANmB;AAOnBG,IAAAA;AAPmB,GAArB;AAUA,sBACE,oBAAC,cAAD,CAAgB,QAAhB;AAAyB,IAAA,KAAK,EAAGoB,YAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG3B,QADH,CADF;AAKD;;AAEDD,QAAQ,CAAC6B,SAAT,GAAqB;AACnB5B,EAAAA,QAAQ,EAAEL,SAAS,CAACkC;AADD,EAEnBC,UAFF;AAIA,eAAe/B,QAAf","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\nimport response from './testData';\n\nconst url = 'https://swapi-trybe.herokuapp.com/api/planets/';\n\nfunction Provider({ children }) {\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState(data);\n  const [filters, setFilters] = useState({\n    filterByName: { name: '' },\n     filterByNumericValues: { column: 'population', comparison: 'maior que',  value: 0},\n  });\n\n  const fetchData = () => fetch(url)\n    .then((result) => result.json())\n    .then(({ results }) => setData(response.results.map((element) => {\n      delete element.residents;\n      return element;\n    })))\n    .catch((err) => err);\n\n  const setFilterByName = (name) => {\n    setFilters({ filterByName: { name } });\n  };\n\n  const filterByName = () => {\n    setFilteredData(data.filter(({ name }) => name.includes(filters.filterByName.name)));\n  };\n\n  const contextValue = {\n    data,\n    fetchData,\n    filters,\n    setFilterByName,\n    filteredData,\n    setFilteredData,\n    filterByName,\n  };\n\n  return (\n    <PlanetsContext.Provider value={ contextValue }>\n      {children}\n    </PlanetsContext.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.node,\n}.isRequired;\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}