{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documents/projects/sd-011-project-starwars-planets-search/src/PlanetsProvider.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\nimport response from './testData';\nconst options = ['population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water'];\nconst url = 'https://swapi-trybe.herokuapp.com/api/planets/';\n\nfunction Provider({\n  children\n}) {\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState(data);\n  const [columnFilterOptions, setColumnFilterOptions] = useState(options);\n  const [newFilter, setNewFilter] = useState({\n    column: columnFilterOptions[0],\n    comparison: 'maior que',\n    value: 0\n  });\n  const [filters, setFilters] = useState({\n    filterByName: {\n      name: ''\n    },\n    filterByNumericValues: []\n  });\n\n  const fetchData = () => fetch(url).then(result => result.json()).then(() => setData(response.results.map(element => {\n    delete element.residents;\n    return element;\n  }))).catch(err => err);\n\n  const handleChangeNewFilter = ({\n    target\n  }) => {\n    const {\n      name,\n      value\n    } = target;\n    setNewFilter(state => ({ ...state,\n      [name]: value\n    }));\n  };\n\n  const setFilterByNumericValues = () => {\n    setFilters(state => ({ ...state,\n      filterByNumericValues: [...state.filterByNumericValues, newFilter]\n    }));\n    setColumnFilterOptions(columnFilterOptions.filter(item => item !== newFilter.column));\n  };\n\n  useEffect(() => {\n    setNewFilter({\n      column: columnFilterOptions[0],\n      comparison: 'maior que',\n      value: 0\n    });\n  }, [columnFilterOptions]);\n\n  const setFilterByName = name => {\n    setFilters(state => ({ ...state,\n      filterByName: {\n        name\n      }\n    }));\n  };\n\n  const applyFilterByNumericValues = () => {\n    let newData = data.filter(({\n      name\n    }) => name.includes(filters.filterByName.name));\n    newData = filters.filterByNumericValues.reduce((acc, curr) => {\n      const {\n        column,\n        comparison,\n        value\n      } = curr;\n\n      switch (comparison) {\n        case 'maior que':\n          return acc.filter(item => parseInt(item[column], 10) > parseInt(value, 10));\n\n        case 'menor que':\n          return acc.filter(item => parseInt(item[column], 10) < parseInt(value, 10));\n\n        case 'igual a':\n          return acc.filter(item => parseInt(item[column], 10) === parseInt(value, 10));\n\n        default:\n          return acc;\n      }\n    }, newData);\n    setFilteredData(newData);\n  };\n\n  const applyFilterByName = () => {\n    setFilteredData(data.filter(({\n      name\n    }) => name.includes(filters.filterByName.name)));\n  };\n\n  const contextValue = {\n    data,\n    fetchData,\n    filters,\n    setFilterByName,\n    filteredData,\n    setFilteredData,\n    applyFilterByName,\n    applyFilterByNumericValues,\n    columnFilterOptions,\n    newFilter,\n    handleChangeNewFilter,\n    setFilterByNumericValues\n  };\n  return /*#__PURE__*/React.createElement(PlanetsContext.Provider, {\n    value: contextValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nProvider.propTypes = {\n  children: PropTypes.node\n}.isRequired;\nexport default Provider;","map":{"version":3,"sources":["/home/rafael/Documents/projects/sd-011-project-starwars-planets-search/src/PlanetsProvider.js"],"names":["React","useEffect","useState","PropTypes","PlanetsContext","response","options","url","Provider","children","data","setData","filteredData","setFilteredData","columnFilterOptions","setColumnFilterOptions","newFilter","setNewFilter","column","comparison","value","filters","setFilters","filterByName","name","filterByNumericValues","fetchData","fetch","then","result","json","results","map","element","residents","catch","err","handleChangeNewFilter","target","state","setFilterByNumericValues","filter","item","setFilterByName","applyFilterByNumericValues","newData","includes","reduce","acc","curr","parseInt","applyFilterByName","contextValue","propTypes","node","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\nimport response from './testData';\n\nconst options = [\n  'population',\n  'orbital_period',\n  'diameter',\n  'rotation_period',\n  'surface_water'];\n\nconst url = 'https://swapi-trybe.herokuapp.com/api/planets/';\n\nfunction Provider({ children }) {\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState(data);\n  const [columnFilterOptions, setColumnFilterOptions] = useState(options);\n  const [newFilter, setNewFilter] = useState({ column: columnFilterOptions[0],\n    comparison: 'maior que',\n    value: 0,\n  });\n  const [filters, setFilters] = useState({\n    filterByName: { name: '' },\n    filterByNumericValues: [],\n  });\n\n  const fetchData = () => fetch(url)\n    .then((result) => result.json())\n    .then(() => setData(response.results.map((element) => {\n      delete element.residents;\n      return element;\n    })))\n    .catch((err) => err);\n\n  const handleChangeNewFilter = ({ target }) => {\n    const { name, value } = target;\n    setNewFilter((state) => ({ ...state, [name]: value }));\n  };\n\n  const setFilterByNumericValues = () => {\n    setFilters((state) => ({\n      ...state,\n      filterByNumericValues: [...state.filterByNumericValues, newFilter],\n    }));\n    setColumnFilterOptions(columnFilterOptions\n      .filter((item) => item !== newFilter.column));\n  };\n\n  useEffect(() => {\n    setNewFilter({ column: columnFilterOptions[0], comparison: 'maior que', value: 0 });\n  }, [columnFilterOptions]);\n\n  const setFilterByName = (name) => {\n    setFilters((state) => ({ ...state, filterByName: { name } }));\n  };\n\n  const applyFilterByNumericValues = () => {\n     let newData = data.filter(({ name }) => name.includes(filters.filterByName.name));\n     newData = filters.filterByNumericValues.reduce((acc, curr) => {\n      const { column, comparison, value } = curr;\n      switch (comparison) {\n      case 'maior que':\n        return acc.filter((item) => parseInt(item[column], 10) > parseInt(value, 10));\n      case 'menor que':\n        return acc.filter((item) => parseInt(item[column], 10) < parseInt(value, 10));\n      case 'igual a':\n        return acc.filter((item) => parseInt(item[column], 10) === parseInt(value, 10));\n      default: return acc;\n      }\n    }, newData);\n    setFilteredData(newData);\n  };\n\n  const applyFilterByName = () => {\n    setFilteredData(data.filter(({ name }) => name.includes(filters.filterByName.name)));\n  };\n\n  const contextValue = {\n    data,\n    fetchData,\n    filters,\n    setFilterByName,\n    filteredData,\n    setFilteredData,\n    applyFilterByName,\n    applyFilterByNumericValues,\n    columnFilterOptions,\n    newFilter,\n    handleChangeNewFilter,\n    setFilterByNumericValues,\n  };\n\n  return (\n    <PlanetsContext.Provider value={ contextValue }>\n      {children}\n    </PlanetsContext.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.node,\n}.isRequired;\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}