{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documents/projects/sd-011-project-starwars-planets-search/src/PlanetsProvider.js\";\nimport React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\nimport response from './testData';\nconst options = ['population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water'];\nconst url = 'https://swapi-trybe.herokuapp.com/api/planets/';\n\nfunction Provider({\n  children\n}) {\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState(data);\n  const [columnFilterOptions, setColumnFilterOptions] = useState(options);\n  const [newFilter, setNewFilter] = useState({\n    column: columnFilterOptions[0],\n    comparison: 'maior que',\n    value: 0\n  });\n  const [filters, setFilters] = useState({\n    filterByName: {\n      name: ''\n    },\n    filterByNumericValues: []\n  });\n\n  const fetchData = () => fetch(url).then(result => result.json()).then(({\n    results\n  }) => setData(response.results.map(element => {\n    delete element.residents;\n    return element;\n  }))).catch(err => err);\n\n  const handleChangeNewFilter = ({\n    target\n  }) => {\n    const {\n      name,\n      value\n    } = target;\n    setNewFilter(state => ({ ...state,\n      [name]: value\n    }));\n  };\n\n  const addNewFilter = () => {\n    setFilters(state => ({ ...state,\n      filterByNumericValues: [state.filterByNumericValues, newFilter]\n    }));\n    setColumnFilterOptions();\n  };\n\n  const setFilterByName = name => {\n    setFilters({\n      filterByName: {\n        name\n      }\n    });\n  };\n\n  const filterByName = () => {\n    setFilteredData(data.filter(({\n      name\n    }) => name.includes(filters.filterByName.name)));\n  };\n\n  const contextValue = {\n    data,\n    fetchData,\n    filters,\n    setFilterByName,\n    filteredData,\n    setFilteredData,\n    filterByName,\n    columnFilterOptions,\n    newFilter,\n    handleChangeNewFilter\n  };\n  return /*#__PURE__*/React.createElement(PlanetsContext.Provider, {\n    value: contextValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nProvider.propTypes = {\n  children: PropTypes.node\n}.isRequired;\nexport default Provider;","map":{"version":3,"sources":["/home/rafael/Documents/projects/sd-011-project-starwars-planets-search/src/PlanetsProvider.js"],"names":["React","useState","PropTypes","PlanetsContext","response","options","url","Provider","children","data","setData","filteredData","setFilteredData","columnFilterOptions","setColumnFilterOptions","newFilter","setNewFilter","column","comparison","value","filters","setFilters","filterByName","name","filterByNumericValues","fetchData","fetch","then","result","json","results","map","element","residents","catch","err","handleChangeNewFilter","target","state","addNewFilter","setFilterByName","filter","includes","contextValue","propTypes","node","isRequired"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\nimport response from './testData';\n\nconst options = ['population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water'];\nconst url = 'https://swapi-trybe.herokuapp.com/api/planets/';\n\nfunction Provider({ children }) {\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState(data);\n  const [columnFilterOptions, setColumnFilterOptions] = useState(options);\n  const [newFilter, setNewFilter] = useState({column: columnFilterOptions[0],\n  comparison: 'maior que',\n  value: 0,\n});\n  const [filters, setFilters] = useState({\n    filterByName: { name: '' },\n     filterByNumericValues: [],\n  });\n\n  const fetchData = () => fetch(url)\n    .then((result) => result.json())\n    .then(({ results }) => setData(response.results.map((element) => {\n      delete element.residents;\n      return element;\n    })))\n    .catch((err) => err);\n\n  const handleChangeNewFilter = ({target}) => {\n    const {name, value} = target;\n    setNewFilter((state) => ({ ...state, [name]: value}))\n  }\n\n  const addNewFilter = () =>{\n    setFilters((state) => ({ ...state, filterByNumericValues: [state.filterByNumericValues, newFilter]}));\n    setColumnFilterOptions()\n  }\n\n  const setFilterByName = (name) => {\n    setFilters({ filterByName: { name } });\n  };\n\n  const filterByName = () => {\n    setFilteredData(data.filter(({ name }) => name.includes(filters.filterByName.name)));\n  };\n\n  const contextValue = {\n    data,\n    fetchData,\n    filters,\n    setFilterByName,\n    filteredData,\n    setFilteredData,\n    filterByName,\n    columnFilterOptions,\n    newFilter,\n    handleChangeNewFilter,\n  };\n\n  return (\n    <PlanetsContext.Provider value={ contextValue }>\n      {children}\n    </PlanetsContext.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.node,\n}.isRequired;\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}