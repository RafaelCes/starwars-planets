{"ast":null,"code":"var _jsxFileName = \"/home/rafael/Documents/projects/sd-011-project-starwars-planets-search/src/PlanetsProvider.js\";\nimport React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\nconst options = ['population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water'];\nconst url = 'https://swapi-trybe.herokuapp.com/api/planets/';\n\nfunction Provider({\n  children\n}) {\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState(data);\n  const [columnFilterOptions, setColumnFilterOptions] = useState(options);\n  const [newOrder, setNewOrder] = useState({\n    column: 'name',\n    sort: 'ASC'\n  });\n  const [newFilter, setNewFilter] = useState({\n    column: columnFilterOptions[0],\n    comparison: 'maior que',\n    value: 0\n  });\n  const [filters, setFilters] = useState({\n    filterByName: {\n      name: ''\n    },\n    filterByNumericValues: [],\n    order: {\n      column: 'name',\n      sort: 'ASC'\n    }\n  });\n\n  const fetchData = () => fetch(url).then(result => result.json()).then(response => setData(response.results.map(element => {\n    delete element.residents;\n    return element;\n  }))).catch(err => err);\n\n  const handleChangeNewFilter = ({\n    target\n  }) => {\n    const {\n      name,\n      value\n    } = target;\n    setNewFilter(state => ({ ...state,\n      [name]: value\n    }));\n  };\n\n  const setFilterByNumericValues = () => {\n    setFilters(state => ({ ...state,\n      filterByNumericValues: [...state.filterByNumericValues, newFilter]\n    }));\n    setColumnFilterOptions(columnFilterOptions.filter(item => item !== newFilter.column));\n  };\n\n  const removeFilterByNumericValues = column => {\n    setFilters(state => ({ ...state,\n      filterByNumericValues: state.filterByNumericValues.filter(item => column !== item.column)\n    }));\n    setColumnFilterOptions(state => [column, ...state]);\n  };\n\n  useEffect(() => {\n    setNewFilter({\n      column: columnFilterOptions[0],\n      comparison: 'maior que',\n      value: 0\n    });\n  }, [columnFilterOptions]);\n\n  const setFilterByName = name => {\n    setFilters(state => ({ ...state,\n      filterByName: {\n        name\n      }\n    }));\n  };\n\n  const applyFilterByNumericValues = newData => {\n    newData = filters.filterByNumericValues.reduce((acc, curr) => {\n      const {\n        column,\n        comparison,\n        value\n      } = curr;\n\n      switch (comparison) {\n        case 'maior que':\n          return acc.filter(item => parseInt(item[column], 10) > parseInt(value, 10));\n\n        case 'menor que':\n          return acc.filter(item => parseInt(item[column], 10) < parseInt(value, 10));\n\n        case 'igual a':\n          return acc.filter(item => parseInt(item[column], 10) === parseInt(value, 10));\n\n        default:\n          return acc;\n      }\n    }, newData);\n    return newData;\n  };\n\n  const orderData = newData => {\n    const {\n      column,\n      sort\n    } = filters.order;\n    const sortedData = newData.sort(function (a, b) {\n      if (sort === 'ASC') {\n        return a[column].localeCompare(b[column], undefined, {\n          numeric: true,\n          sensitivity: 'base'\n        });\n      }\n\n      return b[column].localeCompare(a[column], undefined, {\n        numeric: true,\n        sensitivity: 'base'\n      });\n    });\n    return sortedData;\n  };\n\n  const applyFilterByName = () => data.filter(({\n    name\n  }) => name.includes(filters.filterByName.name));\n\n  const applyFilters = () => {\n    let newData = applyFilterByName();\n    newData = applyFilterByNumericValues(newData);\n    newData = orderData(newData);\n    setFilteredData(newData);\n  };\n\n  const contextValue = {\n    data,\n    fetchData,\n    filters,\n    setFilters,\n    setFilterByName,\n    filteredData,\n    setFilteredData,\n    applyFilters,\n    columnFilterOptions,\n    newFilter,\n    handleChangeNewFilter,\n    setFilterByNumericValues,\n    removeFilterByNumericValues,\n    newOrder,\n    setNewOrder\n  };\n  return /*#__PURE__*/React.createElement(PlanetsContext.Provider, {\n    value: contextValue,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 5\n    }\n  }, children);\n}\n\nProvider.propTypes = {\n  children: PropTypes.node\n}.isRequired;\nexport default Provider;","map":{"version":3,"sources":["/home/rafael/Documents/projects/sd-011-project-starwars-planets-search/src/PlanetsProvider.js"],"names":["React","useEffect","useState","PropTypes","PlanetsContext","options","url","Provider","children","data","setData","filteredData","setFilteredData","columnFilterOptions","setColumnFilterOptions","newOrder","setNewOrder","column","sort","newFilter","setNewFilter","comparison","value","filters","setFilters","filterByName","name","filterByNumericValues","order","fetchData","fetch","then","result","json","response","results","map","element","residents","catch","err","handleChangeNewFilter","target","state","setFilterByNumericValues","filter","item","removeFilterByNumericValues","setFilterByName","applyFilterByNumericValues","newData","reduce","acc","curr","parseInt","orderData","sortedData","a","b","localeCompare","undefined","numeric","sensitivity","applyFilterByName","includes","applyFilters","contextValue","propTypes","node","isRequired"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\n\nconst options = [\n  'population',\n  'orbital_period',\n  'diameter',\n  'rotation_period',\n  'surface_water'];\n\nconst url = 'https://swapi-trybe.herokuapp.com/api/planets/';\n\nfunction Provider({ children }) {\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState(data);\n  const [columnFilterOptions, setColumnFilterOptions] = useState(options);\n  const [newOrder, setNewOrder] = useState({ column: 'name', sort: 'ASC' });\n  const [newFilter, setNewFilter] = useState({ column: columnFilterOptions[0],\n    comparison: 'maior que',\n    value: 0,\n  });\n  const [filters, setFilters] = useState({\n    filterByName: { name: '' },\n    filterByNumericValues: [],\n    order: { column: 'name', sort: 'ASC' },\n  });\n\n  const fetchData = () => fetch(url)\n    .then((result) => result.json())\n    .then((response) => setData(response.results.map((element) => {\n      delete element.residents;\n      return element;\n    })))\n    .catch((err) => err);\n\n  const handleChangeNewFilter = ({ target }) => {\n    const { name, value } = target;\n    setNewFilter((state) => ({ ...state, [name]: value }));\n  };\n\n  const setFilterByNumericValues = () => {\n    setFilters((state) => ({\n      ...state,\n      filterByNumericValues: [...state.filterByNumericValues, newFilter],\n    }));\n    setColumnFilterOptions(columnFilterOptions\n      .filter((item) => item !== newFilter.column));\n  };\n\n  const removeFilterByNumericValues = (column) => {\n    setFilters((state) => ({\n      ...state,\n      filterByNumericValues: state.filterByNumericValues\n        .filter((item) => column !== item.column),\n    }));\n    setColumnFilterOptions((state) => [column, ...state]);\n  };\n\n  useEffect(() => {\n    setNewFilter({ column: columnFilterOptions[0], comparison: 'maior que', value: 0 });\n  }, [columnFilterOptions]);\n\n  const setFilterByName = (name) => {\n    setFilters((state) => ({ ...state, filterByName: { name } }));\n  };\n\n  const applyFilterByNumericValues = (newData) => {\n    newData = filters.filterByNumericValues.reduce((acc, curr) => {\n      const { column, comparison, value } = curr;\n      switch (comparison) {\n      case 'maior que':\n        return acc.filter((item) => parseInt(item[column], 10) > parseInt(value, 10));\n      case 'menor que':\n        return acc.filter((item) => parseInt(item[column], 10) < parseInt(value, 10));\n      case 'igual a':\n        return acc.filter((item) => parseInt(item[column], 10) === parseInt(value, 10));\n      default: return acc;\n      }\n    }, newData);\n    return newData;\n  };\n\n  const orderData = (newData) => {\n    const { column, sort } = filters.order;\n    const sortedData = newData.sort(function (a, b) {\n      if(sort=== 'ASC'){\n        return a[column].localeCompare(b[column], undefined, {\n          numeric: true,\n          sensitivity: 'base'\n        });\n      }\n      return b[column].localeCompare(a[column], undefined, {\n        numeric: true,\n        sensitivity: 'base'\n      });\n    });\n    return sortedData;\n  }\n\n  const applyFilterByName = () => data.filter(({ name }) => name\n    .includes(filters.filterByName.name));\n\n  const applyFilters = () => {\n    let newData = applyFilterByName();\n    newData = applyFilterByNumericValues(newData);\n    newData = orderData(newData);\n    setFilteredData(newData);\n  };\n\n  const contextValue = {\n    data,\n    fetchData,\n    filters,\n    setFilters,\n    setFilterByName,\n    filteredData,\n    setFilteredData,\n    applyFilters,\n    columnFilterOptions,\n    newFilter,\n    handleChangeNewFilter,\n    setFilterByNumericValues,\n    removeFilterByNumericValues,\n    newOrder,\n    setNewOrder,\n  };\n\n  return (\n    <PlanetsContext.Provider value={ contextValue }>\n      {children}\n    </PlanetsContext.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.node,\n}.isRequired;\n\nexport default Provider;\n"]},"metadata":{},"sourceType":"module"}