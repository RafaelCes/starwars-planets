{"version":3,"sources":["PlanetsContext.js","Filters.js","PlanetsProvider.js","Table.js","App.js","index.js"],"names":["PlanetsContext","createContext","Filters","useContext","filters","setFilters","data","setFilterByName","applyFilters","columnFilterOptions","newFilter","handleChangeNewFilter","setFilterByNumericValues","removeFilterByNumericValues","newOrder","setNewOrder","name","filterByName","filterByNumericValues","column","comparison","value","useEffect","htmlFor","type","data-testid","id","onChange","event","target","map","item","key","onClick","length","Object","keys","checked","sort","order","options","Provider","children","useState","setData","filteredData","setFilteredData","setColumnFilterOptions","setNewFilter","contextValue","fetchData","fetch","then","result","json","response","results","element","residents","catch","err","state","newData","filter","includes","a","b","localeCompare","undefined","numeric","sensitivity","orderData","reduce","acc","curr","parseInt","applyFilterByNumericValues","Table","getData","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","films","created","edited","url","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.305d75b1.chunk.js","sourcesContent":["import { createContext } from 'react';\n\nconst PlanetsContext = createContext();\n\nexport default PlanetsContext;\n","import React, { useContext, useEffect } from 'react';\nimport PlanetsContext from './PlanetsContext';\n\nexport default function Filters() {\n  const {\n    filters,\n    setFilters,\n    data,\n    setFilterByName,\n    applyFilters,\n    columnFilterOptions,\n    newFilter,\n    handleChangeNewFilter,\n    setFilterByNumericValues,\n    removeFilterByNumericValues,\n    newOrder,\n    setNewOrder,\n  } = useContext(PlanetsContext);\n\n  const { filterByName: { name }, filterByNumericValues } = filters;\n  const { column, comparison, value } = newFilter;\n\n  useEffect(() => {\n    applyFilters();\n  }, [filters]);\n\n  const renderColumnOptions = () => (\n    columnFilterOptions.map((item) => <option key={ item }>{ item }</option>)\n  );\n\n  const renderFilters = () => filterByNumericValues.map((item) => (\n    <div key={ item.column } data-testid=\"filter\">\n      <p>\n        {item.column}\n        {' '}\n        {item.comparison}\n        {' '}\n        {item.value}\n      </p>\n      <button\n        type=\"button\"\n        onClick={ () => removeFilterByNumericValues(item.column) }\n      >\n        X\n      </button>\n    </div>\n  ));\n\n  return (\n    <div>\n\n      <label htmlFor=\"search-input\">\n        Pesquisa:\n        <input\n          type=\"text\"\n          data-testid=\"name-filter\"\n          id=\"search-input\"\n          value={ name }\n          onChange={ (event) => setFilterByName(event.target.value) }\n        />\n      </label>\n      <label htmlFor=\"column-filter\">\n        <select\n          data-testid=\"column-filter\"\n          name=\"column\"\n          id=\"column-filter\"\n          value={ column }\n          onChange={ handleChangeNewFilter }\n        >\n          {renderColumnOptions()}\n        </select>\n      </label>\n      <label htmlFor=\"comparison-filter\">\n        <select\n          data-testid=\"comparison-filter\"\n          name=\"comparison\"\n          id=\"comparison-filter\"\n          value={ comparison }\n          onChange={ handleChangeNewFilter }\n        >\n          <option>maior que</option>\n          <option>menor que</option>\n          <option>igual a</option>\n        </select>\n      </label>\n      <label htmlFor=\"value-filter\">\n        valor:\n        <input\n          type=\"number\"\n          data-testid=\"value-filter\"\n          name=\"value\"\n          id=\"value-filter\"\n          value={ value }\n          onChange={ handleChangeNewFilter }\n        />\n      </label>\n      <button\n        type=\"button\"\n        data-testid=\"button-filter\"\n        onClick={ setFilterByNumericValues }\n      >\n        Adicionar filtro\n      </button>\n      <select\n        data-testid=\"column-sort\"\n        value={ newOrder.column }\n        onChange={ (event) => setNewOrder({ ...newOrder, column: event.target.value }) }\n      >\n        {data.length\n          ? Object.keys(data[0]).map((item) => <option key={ item }>{ item }</option>)\n          : ''}\n      </select>\n      <label htmlFor=\"asc\">\n        ascendente:\n        <input\n          type=\"radio\"\n          id=\"asc\"\n          name=\"sort\"\n          data-testid=\"column-sort-input-asc\"\n          value=\"ASC\"\n          checked={ newOrder.sort === 'ASC' }\n          onChange={ () => setNewOrder({ ...newOrder, sort: 'ASC' }) }\n        />\n      </label>\n      <label htmlFor=\"desc\">\n        Descendente:\n        <input\n          type=\"radio\"\n          id=\"desc\"\n          name=\"sort\"\n          data-testid=\"column-sort-input-desc\"\n          value=\"DESC\"\n          checked={ newOrder.sort === 'DESC' }\n          onChange={ () => setNewOrder({ ...newOrder, sort: 'DESC' }) }\n        />\n      </label>\n      <button\n        type=\"button\"\n        data-testid=\"column-sort-button\"\n        onClick={ () => setFilters({ ...filters, order: newOrder }) }\n      >\n        Ordenar\n      </button>\n      {renderFilters()}\n    </div>\n  );\n}\n","import React, { useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport PlanetsContext from './PlanetsContext';\n\nconst options = [\n  'population',\n  'orbital_period',\n  'diameter',\n  'rotation_period',\n  'surface_water'];\n\nconst url = 'https://swapi-trybe.herokuapp.com/api/planets/';\n\nfunction Provider({ children }) {\n  const [data, setData] = useState([]);\n  const [filteredData, setFilteredData] = useState(data);\n  const [columnFilterOptions, setColumnFilterOptions] = useState(options);\n  const [newOrder, setNewOrder] = useState({ column: 'name', sort: 'ASC' });\n  const [newFilter, setNewFilter] = useState({ column: columnFilterOptions[0],\n    comparison: 'maior que',\n    value: 0,\n  });\n  const [filters, setFilters] = useState({\n    filterByName: { name: '' },\n    filterByNumericValues: [],\n    order: { column: 'name', sort: 'ASC' },\n  });\n\n  const fetchData = () => fetch(url)\n    .then((result) => result.json())\n    .then((response) => setData(response.results.map((element) => {\n      delete element.residents;\n      return element;\n    })))\n    .catch((err) => err);\n\n  const handleChangeNewFilter = ({ target }) => {\n    const { name, value } = target;\n    setNewFilter((state) => ({ ...state, [name]: value }));\n  };\n\n  const setFilterByNumericValues = () => {\n    setFilters((state) => ({\n      ...state,\n      filterByNumericValues: [...state.filterByNumericValues, newFilter],\n    }));\n    setColumnFilterOptions(columnFilterOptions\n      .filter((item) => item !== newFilter.column));\n  };\n\n  const removeFilterByNumericValues = (column) => {\n    setFilters((state) => ({\n      ...state,\n      filterByNumericValues: state.filterByNumericValues\n        .filter((item) => column !== item.column),\n    }));\n    setColumnFilterOptions((state) => [column, ...state]);\n  };\n\n  useEffect(() => {\n    setNewFilter({ column: columnFilterOptions[0], comparison: 'maior que', value: 0 });\n  }, [columnFilterOptions]);\n\n  const setFilterByName = (name) => {\n    setFilters((state) => ({ ...state, filterByName: { name } }));\n  };\n\n  const applyFilterByNumericValues = (newData) => {\n    newData = filters.filterByNumericValues.reduce((acc, curr) => {\n      const { column, comparison, value } = curr;\n      switch (comparison) {\n      case 'maior que':\n        return acc.filter((item) => parseInt(item[column], 10) > parseInt(value, 10));\n      case 'menor que':\n        return acc.filter((item) => parseInt(item[column], 10) < parseInt(value, 10));\n      case 'igual a':\n        return acc.filter((item) => parseInt(item[column], 10) === parseInt(value, 10));\n      default: return acc;\n      }\n    }, newData);\n    return newData;\n  };\n\n  const orderData = (newData) => {\n    const { column, sort } = filters.order;\n    const sortedData = newData.sort((a, b) => {\n      if (sort === 'ASC') {\n        return a[column].localeCompare(b[column], undefined, {\n          numeric: true,\n          sensitivity: 'base',\n        });\n      }\n      return b[column].localeCompare(a[column], undefined, {\n        numeric: true,\n        sensitivity: 'base',\n      });\n    });\n    return sortedData;\n  };\n\n  const applyFilterByName = () => data.filter(({ name }) => name\n    .includes(filters.filterByName.name));\n\n  const applyFilters = () => {\n    let newData = applyFilterByName();\n    newData = applyFilterByNumericValues(newData);\n    newData = orderData(newData);\n    setFilteredData(newData);\n  };\n\n  const contextValue = {\n    data,\n    fetchData,\n    filters,\n    setFilters,\n    setFilterByName,\n    filteredData,\n    setFilteredData,\n    applyFilters,\n    columnFilterOptions,\n    newFilter,\n    handleChangeNewFilter,\n    setFilterByNumericValues,\n    removeFilterByNumericValues,\n    newOrder,\n    setNewOrder,\n  };\n\n  return (\n    <PlanetsContext.Provider value={ contextValue }>\n      {children}\n    </PlanetsContext.Provider>\n  );\n}\n\nProvider.propTypes = {\n  children: PropTypes.node,\n}.isRequired;\n\nexport default Provider;\n","import React, { useContext, useEffect } from 'react';\nimport PlanetsContext from './PlanetsContext';\n\nexport default function Table() {\n  const { filteredData, fetchData, data,\n    setFilteredData, applyFilters } = useContext(PlanetsContext);\n\n  useEffect(() => {\n    const getData = async () => {\n      await fetchData();\n    };\n    getData();\n  }, []);\n\n  useEffect(() => {\n    setFilteredData(data);\n    applyFilters();\n  }, [data]);\n\n  const renderTableRows = () => filteredData.map((item) => (\n    <tr key={ item.name }>\n      <td data-testid=\"planet-name\">{item.name}</td>\n      <td>{item.rotation_period}</td>\n      <td>{item.orbital_period}</td>\n      <td>{item.diameter}</td>\n      <td>{item.climate}</td>\n      <td>{item.gravity}</td>\n      <td>{item.terrain}</td>\n      <td>{item.surface_water}</td>\n      <td>{item.population}</td>\n      <td>{item.films}</td>\n      <td>{item.created}</td>\n      <td>{item.edited}</td>\n      <td>{item.url}</td>\n    </tr>\n  ));\n\n  if (!filteredData.length) {\n    return <h1>Loading</h1>;\n  } return (\n    <table>\n      <thead>\n        <tr>\n          {Object.keys(data[0]).map((item) => <th key={ item }>{ item }</th>)}\n        </tr>\n      </thead>\n      <tbody>\n        {renderTableRows()}\n      </tbody>\n    </table>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Filters from './Filters';\nimport Provider from './PlanetsProvider';\nimport Table from './Table';\n\nfunction App() {\n  return (\n    <Provider>\n      <Filters />\n      <Table />\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}